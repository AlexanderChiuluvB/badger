// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type KV struct {
	_tab flatbuffers.Table
}

func GetRootAsKV(buf []byte, offset flatbuffers.UOffsetT) *KV {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KV{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *KV) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KV) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *KV) Key(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *KV) KeyLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *KV) KeyBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *KV) MutateKey(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *KV) Value(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *KV) ValueLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *KV) ValueBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *KV) MutateValue(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *KV) Version() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *KV) MutateVersion(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func (rcv *KV) ExpiresAt() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *KV) MutateExpiresAt(n uint64) bool {
	return rcv._tab.MutateUint64Slot(10, n)
}

func (rcv *KV) UserMeta() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *KV) MutateUserMeta(n byte) bool {
	return rcv._tab.MutateByteSlot(12, n)
}

func (rcv *KV) Meta() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *KV) MutateMeta(n byte) bool {
	return rcv._tab.MutateByteSlot(14, n)
}

func (rcv *KV) StreamId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *KV) MutateStreamId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(16, n)
}

func (rcv *KV) StreamDone() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *KV) MutateStreamDone(n bool) bool {
	return rcv._tab.MutateBoolSlot(18, n)
}

func KVStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func KVAddKey(builder *flatbuffers.Builder, key flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(key), 0)
}
func KVStartKeyVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func KVAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(value), 0)
}
func KVStartValueVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func KVAddVersion(builder *flatbuffers.Builder, version uint64) {
	builder.PrependUint64Slot(2, version, 0)
}
func KVAddExpiresAt(builder *flatbuffers.Builder, expiresAt uint64) {
	builder.PrependUint64Slot(3, expiresAt, 0)
}
func KVAddUserMeta(builder *flatbuffers.Builder, userMeta byte) {
	builder.PrependByteSlot(4, userMeta, 0)
}
func KVAddMeta(builder *flatbuffers.Builder, meta byte) {
	builder.PrependByteSlot(5, meta, 0)
}
func KVAddStreamId(builder *flatbuffers.Builder, streamId uint32) {
	builder.PrependUint32Slot(6, streamId, 0)
}
func KVAddStreamDone(builder *flatbuffers.Builder, streamDone bool) {
	builder.PrependBoolSlot(7, streamDone, false)
}
func KVEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
